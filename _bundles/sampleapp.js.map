{"version":3,"file":"sampleapp.js","sources":["webpack:///./app/prefs/prefs.component.ts","webpack:///./app/util/util.ts","webpack:///./app/contacts/contacts.futurestate.ts","webpack:///./app/global/index.ts","webpack:///./app/main/index.ts","webpack:///./app/mymessages/index.ts","webpack:///./app/util/ga.ts","webpack:///./app/bootstrap/bootstrap.ts","webpack:///./app/global/appConfig.service.ts","webpack:///./app/global/auth.service.ts","webpack:///./app/global/dataSources.service.ts","webpack:///./app/global/dialog.directive.ts","webpack:///./app/global/dialog.service.ts","webpack:///./app/global/requiresAuth.hook.ts","webpack:///./app/main/app.component.ts","webpack:///./app/main/app.config.ts","webpack:///./app/main/app.states.ts","webpack:///./app/main/home.component.ts","webpack:///./app/main/login.component.ts","webpack:///./app/main/welcome.component.ts","webpack:///./app/mymessages/compose.component.ts","webpack:///./app/mymessages/directives/folderList.component.ts","webpack:///./app/mymessages/directives/messageTable.component.ts","webpack:///./app/mymessages/directives/sortMessages.directive.ts","webpack:///./app/mymessages/filters/messageBody.filter.ts","webpack:///./app/mymessages/message.component.ts","webpack:///./app/mymessages/messageList.component.ts","webpack:///./app/mymessages/mymessages.component.ts","webpack:///./app/mymessages/mymessages.states.ts","webpack:///./app/mymessages/services/messagesListUI.service.ts","webpack:///./app/prefs/prefs.states.ts","webpack:///./app/util/sessionStorage.ts","webpack:///./app/bootstrap/ngmodule.ts","webpack:///./app/prefs/index.ts"],"sourcesContent":["import { Component, Inject } from '@angular/core';\n\n@Component({\n  selector: 'prefs-component',\n  template: `\n      <div>\n          <button class=\"btn btn-primary\" (click)=\"reset()\"><i class=\"fa fa-recycle\"></i> <span>Reset All Data</span></button>\n      </div>\n\n      <div>\n          <label for=\"restDelay\">Simulated REST API delay (ms)</label>\n          <input type=\"text\" name=\"restDelay\" [(ngModel)]=\"prefs.restDelay\">\n          <button class=\"btn btn-primary\" (click)=\"savePrefs()\">Save</button>\n      </div>\n  `,\n})\nexport class PrefsComponent {\n  prefs;\n\n  constructor(@Inject('AppConfig') public AppConfig) { }\n\n  ngOnInit() {\n    this.prefs = {\n      restDelay: this.AppConfig.restDelay\n    }\n  }\n\n  /** Clear out the session storage */\n  reset() {\n    sessionStorage.clear();\n    document.location.reload(true);\n  }\n\n  /** After saving preferences to session storage, reload the entire application */\n  savePrefs() {\n    Object.assign(this.AppConfig, { restDelay: this.prefs.restDelay }).save();\n    document.location.reload(true);\n  }\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/prefs/prefs.component.ts","/** Some utility functions used by the application */\n\nexport const setProp = (obj, key, val) => { obj[key] = val; return obj; };\nexport const pushToArr = (array, item) => { array.push(item); return array; };\nexport const uniqReduce = (arr, item) => arr.indexOf(item) !== -1 ? arr : pushToArr(arr, item);\nexport const flattenReduce = (arr, item) => arr.concat(item);\nlet guidChar = (c) => c !== 'x' && c !== 'y' ? '-' : Math.floor(Math.random()*16).toString(16).toUpperCase();\nexport const guid = () => \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".split(\"\").map(guidChar).join(\"\");\n\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/util/util.ts","declare var System;\nimport {ngmodule} from \"../bootstrap/ngmodule\"\nimport {loadNgModule} from \"@uirouter/angular\";\n\n// Add Future State to lazy load the Contacts ng2 module\nngmodule.config($stateProvider => {\n  $stateProvider.state({\n    name: 'contacts.**',\n    url: '/contacts',\n    // loadNgModule lazy loads an Angular 2 NgModule (or UIRouterModule)\n    lazyLoad: loadNgModule(() => System.import('./index').then(result => result.ContactsModule))\n  });\n});\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/contacts/contacts.futurestate.ts","import {ngmodule, loadNg1AppModule} from \"../bootstrap/ngmodule\";\n\nimport {AppConfig} from \"./appConfig.service\";\nimport {AuthService} from \"./auth.service\";\nimport {Contacts, Folders, Messages} from \"./dataSources.service\";\nimport {dialog} from \"./dialog.directive\";\nimport {DialogService} from \"./dialog.service\";\nimport {authHookRunBlock} from \"./requiresAuth.hook\";\n\nconst globalAppModule = {\n  directives: {dialog},\n  services: {AppConfig, AuthService, Contacts, Folders, Messages, DialogService},\n  runBlocks: [authHookRunBlock]\n};\n\nloadNg1AppModule(ngmodule, globalAppModule)\n\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/global/index.ts","import {ngmodule, loadNg1AppModule} from \"../bootstrap/ngmodule\";\n\nimport {app} from \"./app.component\";\nimport {welcome} from \"./welcome.component\";\nimport {login} from \"./login.component\";\nimport {home} from \"./home.component\";\nimport {appState, homeState, loginState, welcomeState} from \"./app.states\";\nimport {otherwiseConfigBlock, traceRunBlock} from \"./app.config\";\n\nconst mainAppModule = {\n  components: {app, welcome, login, home},\n  states: [appState, homeState, loginState, welcomeState],\n  configBlocks: [otherwiseConfigBlock],\n  runBlocks: [traceRunBlock]\n};\n\nloadNg1AppModule(ngmodule, mainAppModule);\n\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/main/index.ts","import {ngmodule, loadNg1AppModule} from \"../bootstrap/ngmodule\";\n\nimport {compose} from \"./compose.component\";\nimport {folderList} from \"./directives/folderList.component\";\nimport {message} from \"./message.component\";\nimport {messageList} from \"./messageList.component\";\nimport {mymessages} from \"./mymessages.component\";\nimport {messageTable} from \"./directives/messageTable.component\";\nimport {sortMessages} from \"./directives/sortMessages.directive\";\nimport {messageBody} from \"./filters/messageBody.filter\";\nimport {MessageListUI} from \"./services/messagesListUI.service\";\n\nimport {composeState, messageState, messageListState, mymessagesState} from \"./mymessages.states\";\n\nconst mymessagesAppModule = {\n  directives: {sortMessages},\n  components: {compose, folderList, message, messageList, mymessages, messageTable},\n  states: [composeState, messageState, messageListState, mymessagesState],\n  filters: {messageBody},\n  services: {MessageListUI}\n};\n\nloadNg1AppModule(ngmodule, mymessagesAppModule);\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/mymessages/index.ts","import {ngmodule} from \"../bootstrap/ngmodule\";\n\n/** Google analytics */\n\n(<any>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*(<any>new Date());a=s.createElement(o),\n    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n}))(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n\nvar ga = window['ga'];\n\nga('create', 'UA-73329341-1', 'auto');\nga('send', 'pageview');\n\n\nngmodule.config($transitionsProvider => {\n  $transitionsProvider.onBefore({}, $transition$ => {\n    let path = $transition$.treeChanges().to\n        .map(node=>node.state.self.url)\n        .filter(x => x != null && x !== '^')\n        .join('');\n\n    let vpv = (path) => ga('send', 'pageview', path);\n\n    let success = () => { vpv(path); };\n    let error = (err) => {\n      let errType = err && err.hasOwnProperty(\"type\") ? err.type : '_';\n      path = path.replace(/^\\//, \"\");\n      vpv(`/errors/${errType}/${path}`)\n    };\n\n    $transition$.promise.then(success, error);\n  })\n});\n\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/util/ga.ts","/** * This file is the main entry point for the entire app.\n *\n * If the application is being bundled, this is where the bundling process\n * starts.  If the application is being loaded by an es6 module loader, this\n * is the entry point.\n *\n * Point Webpack or SystemJS to this file.\n *\n * This module imports all the different parts of the application and registers them with angular.\n * - Submodules\n *   - States\n *   - Components\n *   - Directives\n *   - Services\n *   - Filters\n *   - Run and Config blocks\n *     - Transition Hooks\n * - 3rd party Libraries and angular1 module\n *\n * Then this module creates the ng-upgrade adapter\n * and bootstraps the hybrid application\n */\n\n\n//////////////////// APP MODULES ///////////////\n// Create the angular 1 module for the application\nimport { ngmodule } from \"./ngmodule\";\n\n// import all the sub module definitions\n// This registers each app module's states, directives, components, filters,\n// services, and config/run blocks with the ngmodule\nimport '../global/index';\nimport '../main/index';\nimport '../mymessages/index';\nimport '../prefs/index';\nimport '../contacts/contacts.futurestate';\n\n// Google analytics\nimport '../util/ga';\n\n////////////// HYBRID BOOTSTRAP ///////////////\n\nimport * as angular from 'angular';\nimport { NgModuleFactoryLoader, SystemJsNgModuleLoader, NgModule, Injector } from '@angular/core';\nimport { UpgradeModule } from '@angular/upgrade/static';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { UIRouterUpgradeModule } from '@uirouter/angular-hybrid';\nimport { UrlService } from '@uirouter/core';\nimport { PrefsModule } from '../prefs/index';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nexport function getDialogService($injector) {\n  return $injector.get('DialogService');\n}\n\nexport function getContactsService($injector) {\n  return $injector.get('Contacts');\n}\n\n// Create an NgModule for the Angular portion of the hybrid app\n//\n// import the UIRouterUpgradeModule to supply the angular-hybrid directives\n@NgModule({\n  imports: [ BrowserModule, UpgradeModule, UIRouterUpgradeModule, PrefsModule ],\n  providers: [\n    { provide: NgModuleFactoryLoader, useClass: SystemJsNgModuleLoader },\n    // Register some AngularJS services as Angular providers\n    { provide: 'DialogService', deps: ['$injector'], useFactory: getDialogService },\n    { provide: 'Contacts', deps: ['$injector'], useFactory: getContactsService },\n  ]\n}) export class SampleAppModule {\n  ngDoBootstrap() { /* no body */ }\n}\n\n// Tell UI-Router to wait to synchronize the URL (until all bootstrapping is complete)e\nngmodule.config([ '$urlServiceProvider', ($urlService: UrlService) => $urlService.deferIntercept() ]);\n\n// Wait until the DOM is ready\nangular.element(document).ready(function () {\n  // Manually bootstrap the Angular app\n  platformBrowserDynamic().bootstrapModule(SampleAppModule).then(platformRef => {\n    const injector: Injector = platformRef.injector;\n    const upgrade = injector.get(UpgradeModule) as UpgradeModule;\n\n    // Manually bootstrap the AngularJS app\n    upgrade.bootstrap(document.body, ['demo']);\n\n    // Intialize the Angular Module (get() any UIRouter service from DI to initialize it)\n    const url: UrlService = injector.get(UrlService);\n\n    // Instruct UIRouter to listen to URL changes\n    url.listen();\n    url.sync();\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/bootstrap/bootstrap.ts","import * as angular from \"angular\";\n\n/**\n * This service stores and retrieves user preferences in session storage\n */\nexport class AppConfig {\n  sort: string = '+date';\n  emailAddress: string = undefined;\n  restDelay: number = 100;\n\n  constructor() {\n    this.load();\n  }\n\n  load() {\n    try {\n      return angular.extend(this, angular.fromJson(sessionStorage.getItem(\"appConfig\")))\n    } catch (Error) { }\n\n    return this;\n  }\n\n  save() {\n    sessionStorage.setItem(\"appConfig\", angular.toJson(angular.extend({}, this)));\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/global/appConfig.service.ts","import {AppConfig} from \"./appConfig.service\";\n/**\n * This service emulates an Authentication Service.\n */\nexport class AuthService {\n  // data\n  usernames: string[] = ['myself@angular.dev', 'devgal@angular.dev', 'devguy@angular.dev'];\n\n  constructor(public AppConfig: AppConfig, public $q, public $timeout) { }\n\n  /**\n   * Returns true if the user is currently authenticated, else false\n   */\n  isAuthenticated() {\n    return !!this.AppConfig.emailAddress;\n  }\n\n  /**\n   * Fake authentication function that returns a promise that is either resolved or rejected.\n   *\n   * Given a username and password, checks that the username matches one of the known\n   * usernames (this.usernames), and that the password matches 'password'.\n   *\n   * Delays 800ms to simulate an async REST API delay.\n   */\n  authenticate(username, password) {\n    let { $timeout, $q, AppConfig } = this;\n\n    // checks if the username is one of the known usernames, and the password is 'password'\n    const checkCredentials = () => $q((resolve, reject) => {\n      var validUsername = this.usernames.indexOf(username) !== -1;\n      var validPassword = password === 'password';\n\n      return (validUsername && validPassword) ? resolve(username) : reject(\"Invalid username or password\");\n    });\n\n    return $timeout(checkCredentials, 800)\n        .then((authenticatedUser) => {\n          AppConfig.emailAddress = authenticatedUser;\n          AppConfig.save()\n        });\n  }\n\n  /** Logs the current user out */\n  logout() {\n    this.AppConfig.emailAddress = undefined;\n    this.AppConfig.save();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/global/auth.service.ts","import {SessionStorage} from \"../util/sessionStorage\"\nimport {AppConfig} from \"./appConfig.service\";\n\n/**\n * Fake REST Services (Contacts, Folders, Messages) used in the mymessages submodule.\n *\n * Each of these APIs have:\n *\n * .all()\n * .search(exampleItem)\n * .get(id)\n * .save(item)\n * .post(item)\n * .put(item)\n * .remove(item)\n *\n * See ../util/sessionStorage.js for more details, if curious\n */\n\n/** A fake Contacts REST client API */\nexport class Contacts extends SessionStorage {\n  constructor($http, $timeout, $q, AppConfig: AppConfig) {\n    // http://beta.json-generator.com/api/json/get/V1g6UwwGx\n    super($http, $timeout, $q, \"contacts\", \"data/contacts.json\", AppConfig);\n  }\n}\n\n/** A fake Folders REST client API */\nexport class Folders extends SessionStorage {\n  constructor($http, $timeout, $q, AppConfig) {\n    super($http, $timeout, $q, 'folders', 'data/folders.json', AppConfig);\n  }\n}\n\nexport class Messages extends SessionStorage {\n  constructor($http, $timeout, $q, public AppConfig: AppConfig) {\n    // http://beta.json-generator.com/api/json/get/VJl5GbIze\n    super($http, $timeout, $q, 'messages', 'data/messages.json', AppConfig);\n  }\n\n  byFolder(folder) {\n    let searchObject = { folder: folder._id };\n    let toFromAttr = [\"drafts\", \"sent\"].indexOf(folder._id) !== -1 ? \"from\" : \"to\";\n    searchObject[toFromAttr] = this.AppConfig.emailAddress;\n    return this.search(searchObject);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/global/dataSources.service.ts","export const dialog = function($timeout, $q) {\n  return {\n    link: (scope, elem) => {\n      $timeout(() => elem.addClass('active'));\n      elem.data('promise', $q((resolve, reject) => {\n        scope.yes = () => resolve(true);\n        scope.no = () => reject(false);\n      }));\n    },\n    template: `\n      <div class=\"backdrop\"></div>\n      <div class='wrapper'>\n        <div class=\"content\">\n          <h4 ng-show=\"message\">{{message}}</h4>\n          <div ng-show=\"details\">{{details}}</div>\n    \n          <div style=\"padding-top: 1em;\">\n            <button class=\"btn btn-primary\" ng-click=\"yes()\">{{yesMsg}}</button>\n            <button class=\"btn btn-primary\" ng-click=\"no()\">{{noMsg}}</button>\n          </div>\n        </div>\n      </div>\n`\n  }\n};\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/global/dialog.directive.ts","import * as angular from \"angular\";\n\nexport class DialogService {\n  confirm;\n  \n  constructor($document, $compile, $rootScope) {\n    let body = $document.find(\"body\");\n    let elem = angular.element(\"<div class='dialog' dialog='opts'></div>\");\n\n    this.confirm = (message, details = \"Are you sure?\", yesMsg = \"Yes\", noMsg = \"No\") => {\n      $compile(elem)(angular.extend($rootScope.$new(), {message, details, yesMsg, noMsg}));\n      body.append(elem);\n      return elem.data(\"promise\").finally(() => elem.removeClass('active').remove());\n    }\n  }\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/global/dialog.service.ts","/**\n * This file contains a Transition Hook which protects a\n * route that requires authentication.\n *\n * This hook redirects to /login when both:\n * - The user is not authenticated\n * - The user is navigating to a state that requires authentication\n */\nexport function authHookRunBlock($transitions, AuthService) {\n  // Matches if the destination state's data property has a truthy 'requiresAuth' property\n  let requiresAuthCriteria = {\n    to: (state) => state.data && state.data.requiresAuth\n  };\n\n  // Function that returns a redirect for the current transition to the login state\n  // if the user is not currently authenticated (according to the AuthService)\n\n  let redirectToLogin = (transition) => {\n    let AuthService = transition.injector().get('AuthService');\n    let $state = transition.router.stateService;\n    if (!AuthService.isAuthenticated()) {\n      return $state.target('login', undefined, { location: false });\n    }\n  };\n\n  // Register the \"requires auth\" hook with the TransitionsService\n  $transitions.onBefore(requiresAuthCriteria, redirectToLogin, {priority: 10});\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/global/requiresAuth.hook.ts","/**\n * The controller for the `app` component.\n */\nclass AuthedController {\n  //data\n  emailAddress;\n  isAuthenticated;\n\n  constructor(AppConfig, public AuthService, public $state) {\n    this.emailAddress = AppConfig.emailAddress;\n    this.isAuthenticated = AuthService.isAuthenticated();\n  }\n\n  logout() {\n    let {AuthService, $state} = this;\n    AuthService.logout();\n    // Reload states after authentication change\n    return $state.go('welcome', {}, { reload: true });\n  }\n}\n\n/**\n * This is the main app component for an authenticated user.\n * \n * This component renders the outermost chrome (application header and tabs, the compose  and logout button)\n * It has a `ui-view` viewport for nested states to fill in.\n */\nexport const app = {\n  controller: AuthedController,\n  template: `\n    <div class=\"navheader\">\n      <ul ng-if=\"::$ctrl.isAuthenticated\" class=\"nav nav-tabs\">\n    \n        <li ui-sref-active=\"active\"> <a ui-sref=\"mymessages\" role=\"button\"> Messages </a> </li>\n        <li ui-sref-active=\"active\"> <a ui-sref=\"contacts\" role=\"button\"> Contacts </a> </li>\n        <li ui-sref-active=\"active\"> <a ui-sref=\"prefs\" role=\"button\"> Preferences </a> </li>\n    \n        <li class=\"navbar-right\">\n          <button class=\"btn btn-primary fa fa-home\" ui-sref=\"home\"></button>\n          <button style=\"margin-right: 15px;\" class=\"btn btn-primary\" ui-sref=\"mymessages.compose\"><i class=\"fa fa-envelope\"></i> New Message</button>\n        </li>\n    \n        <li class=\"navbar-text navbar-right logged-in-user\" style=\"margin: 0.5em 1.5em;\">\n          <div>\n            {{::$ctrl.emailAddress}} <i class=\"fa fa-chevron-down\"></i>\n            <div class=\"hoverdrop\">\n              <button class=\"btn btn-primary\" ng-click=\"$ctrl.logout()\">Log Out</button>\n            </div>\n          </div>\n        </li>\n    \n      </ul>\n    </div>\n    \n    <div ui-view/>\n`\n};\n\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/main/app.component.ts","// Apply some global configuration...\n\n// If the user enters a URL that doesn't match any known URL (state), send them to `/welcome`\nexport const otherwiseConfigBlock = ['$urlRouterProvider', $urlRouterProvider => { $urlRouterProvider.otherwise(\"/welcome\"); }];\n\n// Enable tracing of each TRANSITION... (check the javascript console)\n\n// This syntax `$trace.enable(1)` is an alternative to `$trace.enable(\"TRANSITION\")`.\n// Besides \"TRANSITION\", you can also enable tracing for : \"RESOLVE\", \"HOOK\", \"INVOKE\", \"UIVIEW\", \"VIEWCONFIG\"\nexport const traceRunBlock = ['$trace', $trace => { $trace.enable(1); }];\n\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/main/app.config.ts","/**\n * This is the parent state for the entire application.\n *\n * This state's primary purposes are:\n * 1) Shows the outermost chrome (including the navigation and logout for authenticated users)\n * 2) Provide a viewport (ui-view) for a substate to plug into\n */\nexport const appState = {\n  name: 'app',\n  redirectTo: 'welcome',\n  component: 'app'\n};\n\n/**\n * This is the 'welcome' state.  It is the default state (as defined by app.js) if no other state\n * can be matched to the URL.\n */\nexport const welcomeState = {\n  parent: 'app',\n  name: 'welcome',\n  url: '/welcome',\n  component: 'welcome'\n};\n\n\n/**\n * This is a home screen for authenticated users.\n *\n * It shows giant buttons which activate their respective submodules: Messages, Contacts, Preferences\n */\nexport const homeState = {\n  parent: 'app',\n  name: 'home',\n  url: '/home',\n  component: 'home'\n};\n\n\n/**\n * This is the login state.  It is activated when the user navigates to /login, or if a unauthenticated\n * user attempts to access a protected state (or substate) which requires authentication. (see routerhooks/requiresAuth.js)\n *\n * It shows a fake login dialog and prompts the user to authenticate.  Once the user authenticates, it then\n * reactivates the state that the user originally came from.\n */\nexport const loginState = {\n  parent: 'app',\n  name: 'login',\n  url: '/login',\n  component: 'login',\n  resolve: { returnTo: returnTo }\n};\n\n/**\n * A resolve function for 'login' state which figures out what state to return to, after a successful login.\n *\n * If the user was initially redirected to login state (due to the requiresAuth redirect), then return the toState/params\n * they were redirected from.  Otherwise, if they transitioned directly, return the fromState/params.  Otherwise\n * return the main \"home\" state.\n */\nfunction returnTo ($transition$): any {\n  if ($transition$.redirectedFrom() != null) {\n    // The user was redirected to the login state (e.g., via the requiresAuth hook when trying to activate contacts)\n    // Return to the original attempted target state (e.g., contacts)\n    return $transition$.redirectedFrom().targetState();\n  }\n\n  let $state = $transition$.router.stateService;\n\n  // The user was not redirected to the login state; they directly activated the login state somehow.\n  // Return them to the state they came from.\n  if ($transition$.from().name !== '') {\n    return $state.target($transition$.from(), $transition$.params(\"from\"));\n  }\n\n  // If the fromState's name is empty, then this was the initial transition. Just return them to the home state\n  return $state.target('home');\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/main/app.states.ts","// This is a home component for authenticated users.\n// It shows giant buttons which activate their respective submodules: Messages, Contacts, Preferences\nexport const home = {\n  template: `\n    <div class=\"home buttons\">\n      <button ui-sref=\"mymessages\" class=\"btn btn-primary\">\n        <h1><i class=\"fa fa-envelope\"></i></h1>\n        <h1>Messages</h1>\n      </button>\n\n      <button ui-sref=\"contacts\" class=\"btn btn-primary\">\n      <h1><i class=\"fa fa-users\"></i></h1>\n      <h1>Contacts</h1>\n      </button>\n\n      <button ui-sref=\"prefs\" class=\"btn btn-primary\">\n        <h1><i class=\"fa fa-cogs\"></i></h1>\n        <h1>Preferences</h1>\n      </button>\n    </div>\n`};\n\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/main/home.component.ts","import {TargetState} from \"@uirouter/core\";\n/**\n * The controller for the `login` component\n *\n * The `login` method validates the credentials.\n * Then it sends the user back to the `returnTo` state, which is provided as a resolve data.\n */\nclass LoginController {\n  returnTo: TargetState;\n  \n  usernames;\n  credentials;\n  authenticating;\n  errorMessage;\n\n  login;\n  \n  constructor(AppConfig, AuthService, $state) {\n    this.usernames = AuthService.usernames;\n\n    this.credentials = {\n      username: AppConfig.emailAddress,\n      password: 'password'\n    };\n\n    this.login = (credentials) => {\n      this.authenticating = true;\n\n      const returnToOriginalState = () => {\n        let state = this.returnTo.state();\n        let params = this.returnTo.params();\n        let options = Object.assign({}, this.returnTo.options(), { reload: true });\n        $state.go(state, params, options);\n      };\n\n      const showError = (errorMessage) =>\n          this.errorMessage = errorMessage;\n\n      AuthService.authenticate(credentials.username, credentials.password)\n          .then(returnToOriginalState)\n          .catch(showError)\n          .finally(() => this.authenticating = false);\n    }\n  }\n}\n\n/**\n * This component renders a faux authentication UI\n *\n * It prompts for the username/password (and gives hints with bouncy arrows)\n * It shows errors if the authentication failed for any reason.\n */\nexport const login = {\n  bindings: { returnTo: '<' },\n\n  controller: LoginController,\n\n  template:  `\n    <div class=\"container\">\n      <div class=\"col-md-6 col-md-offset-3 col-sm-8 col-sm-offset-2\">\n        <h3>Log In</h3>\n        <p>(This login screen is for demonstration only... just pick a username, enter 'password' and click <b>\"Log in\"</b>)</p>\n        <hr>\n    \n        <div>\n          <label for=\"username\">Username:</label>\n          <select class=\"form-control\" name=\"username\" id=\"username\"\n            ng-model=\"$ctrl.credentials.username\" ng-options=\"username for username in $ctrl.usernames\"></select>\n          <i style=\"position: relative; bottom: 1.8em; margin-left: 10em; height: 0\"\n              ng-hide=\"$ctrl.credentials.username\" class=\"fa fa-arrow-left bounce-horizontal\"> Choose </i>\n        </div>\n        <br>\n    \n        <div>\n          <label for=\"password\">Password:</label>\n          <input class=\"form-control\" type=\"password\" name=\"password\" ng-model=\"$ctrl.credentials.password\">\n          <i style=\"position: relative; bottom: 1.8em; margin-left: 5em; height: 0\"\n              ng-hide=\"!$ctrl.credentials.username || $ctrl.credentials.password == 'password'\" class=\"fa fa-arrow-left bounce-horizontal\">\n            Enter '<b>password</b>' here\n          </i>\n        </div>\n    \n        <div ng-show=\"$ctrl.errorMessage\" class=\"well error\">{{ $ctrl.errorMessage }}</div>\n    \n        <hr>\n        <div>\n          <button class=\"btn btn-primary\" type=\"button\"\n              ng-disabled=\"$ctrl.authenticating\" ng-click=\"$ctrl.login($ctrl.credentials)\">\n            <i class=\"fa fa-spin fa-spinner\" ng-show=\"$ctrl.authenticating\"></i> <span>Log in</span>\n          </button>\n          <i ng-show=\"$ctrl.credentials.username && $ctrl.credentials.password == 'password'\" style=\"position: relative;\" class=\"fa fa-arrow-left bounce-horizontal\"> Click Me!</i>\n      </div>\n    </div>\n    `\n};\n\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/main/login.component.ts","export const welcome = {\n  template: `\n    <div class=\"container-fluid\">\n    \n      <h3>UI-Router Sample App</h3>\n    \n      <p>Welcome to the sample app!</p>\n      <p>This is a demonstration app intended to highlight some patterns that can be used within UI-Router.\n        These patterns should help you to to build cohesive, robust apps.  Additionally, this app uses state-vis\n        to show the tree of states, and a transition log visualizer.</p>\n    \n      <h4>App Overview</h4>\n      <p>\n        First, start exploring the application's functionality at a high level by activating\n        one of the three submodules: Messages, Contacts, or Preferences. If you are not already logged in,\n        you will be taken to an authentication screen (the authentication is fake; the password is \"password\")\n        <div>\n          <button class=\"btn btn-primary\" ui-sref=\"mymessages\"><i class=\"fa fa-envelope\"></i><span>Messages</span></button>\n          <button class=\"btn btn-primary\" ui-sref=\"contacts\"><i class=\"fa fa-users\"></i><span>Contacts</span></button>\n          <button class=\"btn btn-primary\" ui-sref=\"prefs\"><i class=\"fa fa-cogs\"></i><span>Preferences</span></button>\n        </div>\n      </p>\n    \n      <h4>Patterns and Recipes</h4>\n      <ul>\n        <li>Require Authentication</li>\n        <li>Previous State</li>\n        <li>Redirect Hook</li>\n        <li>Default Param Values</li>\n      </ul>\n    </div>`\n};\n\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/main/welcome.component.ts","import * as angular from \"angular\";\n\n/**\n * The controller for the Compose component\n */\nclass ComposeController {\n  // bound\n  $stateParams;\n  $transition$;\n  \n  // data\n  pristineMessage;\n  message;\n  canExit: boolean;\n\n  constructor(public $state, public DialogService, public AppConfig, public Messages) { }\n\n  /**\n   * Create our message's model using the current user's email address as 'message.from'\n   * Then extend it with all the properties from (non-url) state parameter 'message'.\n   * Keep two copies: the editable one and the original one.\n   * These copies are used to check if the message is dirty.\n   */\n  $onInit() {\n    this.pristineMessage = angular.extend({from: this.AppConfig.emailAddress}, this.$stateParams.message);\n    this.message = angular.copy(this.pristineMessage);\n  }\n\n  /**\n   * Checks if the edited copy and the pristine copy are identical when the state is changing.\n   * If they are not identical, the allows the user to confirm navigating away without saving.\n   */\n  uiCanExit() {\n    if (this.canExit || angular.equals(this.pristineMessage, this.message)) {\n        return true;\n    }\n\n    var message = 'You have not saved this message.';\n    var question = 'Navigate away and lose changes?';\n    return this.DialogService.confirm(message, question, \"Yes\", \"No\");\n  }\n\n  /**\n   * Navigates back to the previous state.\n   *\n   * - Checks the $transition$ which activated this controller for a 'from state' that isn't the implicit root state.\n   * - If there is no previous state (because the user deep-linked in, etc), then go to 'mymessages.messagelist'\n   */\n  gotoPreviousState() {\n    let $transition$ = this.$transition$;\n    let hasPrevious = !!$transition$.from().name;\n    let state = hasPrevious ? $transition$.from() : \"mymessages.messagelist\";\n    let params = hasPrevious ? $transition$.params(\"from\") : {};\n    this.$state.go(state, params);\n  };\n\n  /** \"Send\" the message (save to the 'sent' folder), and then go to the previous state */\n  send(message) {\n    this.Messages.save(angular.extend(message, {date: new Date(), read: true, folder: 'sent'}))\n        .then(() => this.canExit = true)\n        .then(() => this.gotoPreviousState());\n  };\n\n  /** Save the message to the 'drafts' folder, and then go to the previous state */\n  save(message) {\n    this.Messages.save(angular.extend(message, {date: new Date(), read: true, folder: 'drafts'}))\n        .then(() => this.canExit = true)\n        .then(() => this.gotoPreviousState());\n  }\n}\n\n/**\n * This component composes a message\n *\n * The message might be new, a saved draft, or a reply/forward.\n * A Cancel button discards the new message and returns to the previous state.\n * A Save As Draft button saves the message to the \"drafts\" folder.\n * A Send button sends the message\n */\nexport const compose = {\n  bindings: { $stateParams: '<', $transition$: '<' },\n\n  controller: ComposeController,\n\n  template: `\n    <div class=\"compose\">\n      <div class=\"header\">\n        <div class=\"flex-h\"> <label>Recipient</label> <input type=\"text\" id=\"to\" name=\"to\" ng-model=\"$ctrl.message.to\"> </div>\n        <div class=\"flex-h\"> <label>Subject</label> <input type=\"text\" id=\"subject\" name=\"subject\" ng-model=\"$ctrl.message.subject\"> </div>\n      </div>\n    \n      <div class=\"body\">\n        <textarea name=\"body\" id=\"body\" ng-model=\"$ctrl.message.body\" cols=\"30\" rows=\"20\"></textarea>\n        \n        <div class=\"buttons\">\n          <!-- Clicking this button brings the user back to the state they came from (previous state) -->\n          <button class=\"btn btn-primary\" ng-click=\"$ctrl.gotoPreviousState()\"><i class=\"fa fa-times-circle-o\"></i><span>Cancel</span></button>\n          <button class=\"btn btn-primary\" ng-click=\"$ctrl.save($ctrl.message)\"><i class=\"fa fa-save\"></i><span>Save as Draft</span></button>\n          <button class=\"btn btn-primary\" ng-click=\"$ctrl.send($ctrl.message)\"><i class=\"fa fa-paper-plane-o\"></i><span>Send</span></button>\n        </div>\n      </div>\n    </div>\n`\n};\n\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/mymessages/compose.component.ts","/**\n * Renders a list of folders\n */\nexport const folderList = {\n  bindings: {folders: '<'},\n\n  template: `\n    <!-- Renders a list of folders -->\n    <div class=\"folderlist\">\n      <ul class=\"selectlist list-unstyled\">\n  \n        <!-- Highlight the selected folder:\n            When the current state matches the ui-sref's state (and its parameters)\n            ui-sref-active applies the 'selected' class to the li element -->\n        <li class=\"folder\" ui-sref-active=\"selected\" ng-repeat=\"folder in $ctrl.folders\" >\n          <!-- This ui-sref is a relative link to the 'mymessages.messagelist' substate. It provides the\n              'folderId' parameter value from the current folder's .id property -->\n          <a ui-sref=\".messagelist({folderId: folder._id})\"><i class=\"fa\"></i>{{folder._id}}</a>\n        </li>\n      </ul>\n    </div>\n`};\n\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/mymessages/directives/folderList.component.ts","/**\n * A component that displays a folder of messages as a table\n * \n * If a row is clicked, the details of the message is shown using a relative ui-sref to `.message`.\n * \n * ui-sref-active is used to highlight the selected row.\n * \n * Shows/hides specific columns based on the `columns` input binding.\n */\nexport const messageTable = {\n  bindings: { columns: '<', messages: '<' },\n\n  controller: function(AppConfig) {\n    this.AppConfig = AppConfig;\n    this.colVisible = (name) => this.columns.indexOf(name) !== -1;\n  },\n\n  template: `\n    <table>\n      <thead>\n        <tr>\n          <td ng-if=\"::$ctrl.colVisible('read')\"></td>\n          <td ng-if=\"::$ctrl.colVisible('from')\"     sort-messages=\"from\">Sender</td>\n          <td ng-if=\"::$ctrl.colVisible('to')\"       sort-messages=\"to\">Recipient</td>\n          <td ng-if=\"::$ctrl.colVisible('subject')\"  sort-messages=\"subject\">Subject</td>\n          <td ng-if=\"::$ctrl.colVisible('date')\"     sort-messages=\"date\">Date</td>\n        </tr>\n      </thead>\n  \n      <tbody>\n        <tr ng-repeat=\"message in $ctrl.messages | orderBy: $ctrl.AppConfig.sort track by message._id\"\n            ui-sref=\".message({messageId: message._id})\" ui-sref-active=\"active\">\n          <td ng-if=\"::$ctrl.colVisible('read')\"><i class=\"fa fa-circle\" style=\"font-size: 50%\" ng-show=\"!message.read\"></td>\n          <td ng-if=\"::$ctrl.colVisible('from')\">{{ message.from }}</td>\n          <td ng-if=\"::$ctrl.colVisible('to')\">{{ message.to }}</td>\n          <td ng-if=\"::$ctrl.colVisible('subject')\">{{ message.subject }}</td>\n          <td ng-if=\"::$ctrl.colVisible('date')\">{{ message.date | date: \"yyyy-MM-dd\" }}</td>\n        </tr>\n      </tbody>\n  \n    </table>\n`};\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/mymessages/directives/messageTable.component.ts","import * as angular from \"angular\";\n\n/**\n * A directive (for a table header) which changes the app's sort order\n */\nexport const sortMessages = (AppConfig) => {\n  return {\n    restrict: 'A',\n    link: function(scope, elem, attrs) {\n      let col = attrs['sortMessages'];\n      if (!col) return;\n      let chevron = angular.element(\"<i style='padding-left: 0.25em' class='fa'></i>\");\n      elem.append(chevron);\n\n      elem.on(\"click\", (evt) => AppConfig.sort = (AppConfig.sort === `+${col}`) ? `-${col}` : `+${col}`);\n      scope.$watch(() => AppConfig.sort, (newVal) => {\n        chevron.toggleClass(\"fa-sort-asc\", newVal == `+${col}`);\n        chevron.toggleClass(\"fa-sort-desc\", newVal == `-${col}`);\n      });\n    }\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/mymessages/directives/sortMessages.directive.ts","/** Angular filter to format fake emails as HTML*/\nexport const messageBody = function($sce) {\n  return (msgText = '') => $sce.trustAsHtml(msgText.split(/\\n/).map(p => `<p>${p}</p>`).join('\\n'));\n};\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/mymessages/filters/messageBody.filter.ts","import {setProp} from \"../util/util\";\n\n/** Helper function to prefix a message with \"fwd: \" or \"re: \" */\nconst prefixSubject = (prefix, message) => prefix + message.subject;\n/** Helper function which quotes an email message */\nconst quoteMessage = (message) => `\n\n\n\n---------------------------------------\nOriginal message:\nFrom: ${message.from}\nDate: ${message.date}\nSubject: ${message.subject}\n\n${message.body}`;\n\n/** Helper function to make a response message object */\nconst makeResponseMsg = (subjectPrefix, origMsg) => ({\n  from: origMsg.to,\n  to: origMsg.from,\n  subject: prefixSubject(subjectPrefix, origMsg),\n  body: quoteMessage(origMsg)\n});\n\n\n/**\n * The controller for the Message component\n */\nclass MessageController {\n  // bound\n  folder;\n  message;\n  nextMessageGetter;\n  \n  // data\n  actions;\n\n  constructor(public $state, public DialogService, public Messages) { }\n\n  /**\n   * When the user views a message, mark it as read and save (PUT) the resource.\n   *\n   * Apply the available actions for the message, depending on the folder the message belongs to.\n   */\n  $onInit() {\n    this.message.read = true;\n    this.Messages.put(this.message);\n\n    this.actions = this.folder.actions.reduce((obj, action) => setProp(obj, action, true), {});\n  }\n\n  /**\n   * Compose a new message as a reply to this one\n   */\n  reply(message) {\n    let replyMsg = makeResponseMsg(\"Re: \", message);\n    this.$state.go('mymessages.compose', { message: replyMsg });\n  };\n\n  /**\n   * Compose a new message as a forward of this one.\n   */\n  forward(message) {\n    let fwdMsg = makeResponseMsg(\"Fwd: \", message);\n    delete fwdMsg.to;\n    this.$state.go('mymessages.compose', { message: fwdMsg });\n  };\n\n  /**\n   * Continue composing this (draft) message\n   */\n  editDraft(message) {\n    this.$state.go('mymessages.compose', { message: message });\n  };\n\n  /**\n   * Delete this message.\n   *\n   * - confirm deletion\n   * - delete the message\n   * - determine which message should be active\n   * - show that message\n   */\n  remove(message) {\n    let nextMessageId = this.nextMessageGetter(message._id);\n    let nextState = nextMessageId ? 'mymessages.messagelist.message' : 'mymessages.messagelist';\n    let params = { messageId: nextMessageId };\n\n    this.DialogService.confirm(\"Delete?\", undefined)\n        .then(() => this.Messages.remove(message))\n        .then(() => this.$state.go(nextState, params, { reload: 'mymessages.messagelist' }));\n  };\n}\n\n/**\n * This component renders a single message\n *\n * Buttons perform actions related to the message.\n * Buttons are shown/hidden based on the folder's context.\n * For instance, a \"draft\" message can be edited, but can't be replied to.\n */\nexport const message = {\n  bindings: { folder: '<', message: '<', nextMessageGetter: '<' },\n\n  controller: MessageController,\n\n  template: `\n    <div class=\"message\">\n    \n      <div class=\"header\">\n        <div>\n          <h4>{{$ctrl.message.subject}}</h4>\n          <h5>{{$ctrl.message.from}} <i class=\"fa fa-long-arrow-right\"></i> {{$ctrl.message.to}}</h5>\n        </div>\n    \n        <div class=\"line2\">\n          <div>{{$ctrl.message.date | date: 'longDate'}} {{$ctrl.message.date | date: 'mediumTime'}}</div>\n          <div>\n            <button class=\"btn btn-primary\" ng-show=\"$ctrl.actions.edit\" ng-click=\"$ctrl.editDraft($ctrl.message)\"><i class=\"fa fa-pencil\"></i> <span>Edit Draft</span></button>\n            <button class=\"btn btn-primary\" ng-show=\"$ctrl.actions.reply\" ng-click=\"$ctrl.reply($ctrl.message)\"><i class=\"fa fa-reply\"></i> <span>Reply</span></button>\n            <button class=\"btn btn-primary\" ng-show=\"$ctrl.actions.forward\" ng-click=\"$ctrl.forward($ctrl.message)\"><i class=\"fa fa-forward\" ></i> <span>Forward</span></button>\n            <button class=\"btn btn-primary\" ng-show=\"$ctrl.actions.delete\" ng-click=\"$ctrl.remove($ctrl.message)\"><i class=\"fa fa-close\"></i> <span>Delete</span></button>\n          </div>\n        </div>\n      </div>\n    \n      <!-- Pass the raw (plain text) message body through the messageBody filter to format slightly nicer. -->\n      <div class=\"body\" ng-bind-html=\"::$ctrl.message.body | messageBody\"></div>\n    </div>\n`};\n\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/mymessages/message.component.ts","/**\n * This component renders a list of messages using the `messageTable` component\n */\nexport const messageList = {\n  bindings: { folder: '<', messages: '<' },\n  template: `\n    <div class=\"messages\">\n      <message-table columns=\"$ctrl.folder.columns\" messages=\"$ctrl.messages\"></message-table>\n    </div>\n`};\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/mymessages/messageList.component.ts","/**\n * The main mymessages component.\n *\n * Renders a list of folders, and has two viewports:\n * - messageList: filled with the list of messages for a folder\n * - messagecontent: filled with the contents of a single message.\n */\nexport const mymessages = {\n  bindings: {folders: '<'},\n\n  template: `\n    <div class=\"my-messages\">\n    \n      <!-- Show message folders -->\n      <folder-list folders=\"$ctrl.folders\"></folder-list>\n    \n      <!-- A named view for the list of messages in this folder.  This will be  filled in by the 'mymessages.messagelist' child state -->\n      <div ui-view=\"messagelist\" class=\"messagelist\"> </div>\n    \n    </div>\n    \n    <!-- A named ui-view for a message's contents.  The 'mymessages.messagelist.message' grandchild state plugs into this ui-view -->\n    <div ui-view=\"messagecontent\"></div>\n`};\n\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/mymessages/mymessages.component.ts","/**\n * This state allows the user to compose a new message, edit a drafted message, send a message,\n * or save an unsent message as a draft.\n *\n * This state uses view-targeting to take over the ui-view that would normally be filled by the 'mymessages' state.\n */\nexport const composeState = {\n  name: 'mymessages.compose',\n  url: '/compose',\n  // Declares that this state has a 'message' parameter, that defaults to an empty object.\n  // Note the parameter does not appear in the URL.\n  params: {\n    message: {}\n  },\n  views: {\n    // Absolutely targets the $default (unnamed) ui-view, two nesting levels down with the composeComponent.\n    \"!$default.$default\": 'compose'\n  }\n};\n\n/**\n * The mymessages state. This is the main state for the mymessages submodule.\n *\n * This state shows the list of folders for the current user. It retrieves the folders from the\n * Folders service.  If a user navigates directly to this state, the state redirects to the 'mymessages.messagelist'.\n */\nexport const mymessagesState = {\n  parent: 'app',\n  name: \"mymessages\",\n  url: \"/mymessages\",\n  resolve: {\n    // All the folders are fetched from the Folders service\n    folders: (Folders) => Folders.all()\n  },\n  // If mymessages state is directly activated, redirect the transition to the child state 'mymessages.messagelist'\n  redirectTo: 'mymessages.messagelist',\n  component: 'mymessages',\n  // Mark this state as requiring authentication.  See ../routerhooks/requiresAuth.js.\n  data: { requiresAuth: true }\n};\n\n\n/**\n * This state shows the contents of a single message.\n * It also has UI to reply, forward, delete, or edit an existing draft.\n */\nexport const messageState = {\n  name: 'mymessages.messagelist.message',\n  url: '/:messageId',\n  resolve: {\n    // Fetch the message from the Messages service using the messageId parameter\n    message: (Messages, $stateParams) => Messages.get($stateParams.messageId),\n    // Provide the component with a function it can query that returns the closest message id\n    nextMessageGetter: (MessageListUI, messages) => MessageListUI.proximalMessageId.bind(MessageListUI, messages)\n  },\n  views: {\n    // Relatively target the parent-state's parent-state's 'messagecontent' ui-view\n    // This could also have been written using ui-view@state addressing: 'messagecontent@mymessages'\n    // Or, this could also have been written using absolute ui-view addressing: '!$default.$default.messagecontent'\n    \"^.^.messagecontent\": 'message'\n  }\n};\n\n\n/**\n * This state shows the contents (a message list) of a single folder\n */\nexport const messageListState = {\n  name: 'mymessages.messagelist',\n  url: '/:folderId',\n  // The folderId parameter is part of the URL.  This params block sets 'inbox' as the default value.\n  // If no parameter value for folderId is provided on the transition, then it will be defaulted to 'inbox'\n  params: {folderId: \"inbox\"},\n  resolve: {\n    // Fetch the current folder from the Folders service, using the folderId parameter\n    folder: (Folders, $stateParams) => Folders.get($stateParams.folderId),\n\n    // The resolved folder object (from the resolve above) is injected into this resolve\n    // The list of message for the folder are fetched from the Messages service\n    messages: (Messages, folder) => Messages.byFolder(folder)\n  },\n  views: {\n    // This targets the \"messagelist\" named ui-view added to the DOM in the parent state 'mymessages'\n    \"messagelist\": 'messageList'\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/mymessages/mymessages.states.ts","/** Provides services related to a message list */\nexport class MessageListUI {\n  constructor(public $filter, public AppConfig) { }\n\n  /** This is a UI helper which finds the nearest messageId in the messages list to the messageId parameter */\n  proximalMessageId(messages, messageId) {\n    let sorted = this.$filter(\"orderBy\")(messages, this.AppConfig.sort);\n    let idx = sorted.findIndex(msg => msg._id === messageId);\n    var proximalIdx = sorted.length > idx + 1 ? idx + 1 : idx - 1;\n    return proximalIdx >= 0 ? sorted[proximalIdx]._id : undefined;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/mymessages/services/messagesListUI.service.ts","import { PrefsComponent } from './prefs.component';\n\n/**\n * This state allows the user to set their application preferences\n */\nexport const prefsState = {\n  parent: 'app',\n  name: 'prefs',\n  url: '/prefs',\n  component: PrefsComponent,\n  // Mark this state as requiring authentication.  See ../global/requiresAuth.hook.js.\n  data: { requiresAuth: true }\n};\n\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/prefs/prefs.states.ts","import {pushToArr, guid, setProp} from \"./util\";\n\n/**\n * This class simulates a RESTful resource, but the API calls fetch data from\n * Session Storage instead of an HTTP call.\n *\n * Once configured, it loads the initial (pristine) data from the URL provided (using HTTP).\n * It exposes GET/PUT/POST/DELETE-like API that operates on the data.  All the data is also\n * stored in Session Storage.  If any data is modified in memory, session storage is updated.\n * If the browser is refreshed, the SessionStorage object will try to fetch the existing data from\n * the session, before falling back to re-fetching the initial data using HTTP.\n *\n * For an example, please see dataSources.js\n */\nexport class SessionStorage {\n  // data\n  _data;\n  _idProp;\n  _eqFn;\n  \n  /**\n   * Creates a new SessionStorage object\n   *\n   * @param $http Pass in the $http service\n   * @param $timeout Pass in the $timeout service\n   * @param $q Pass in the $q service\n   * @param sessionStorageKey The session storage key. The data will be stored in browser's session storage under this key.\n   * @param sourceUrl The url that contains the initial data.\n   * @param AppConfig Pass in the AppConfig object\n   */\n  constructor($http, public $timeout, public $q, public sessionStorageKey, sourceUrl, public AppConfig) {\n    let data, fromSession = sessionStorage.getItem(sessionStorageKey);\n    // A promise for *all* of the data.\n    this._data = undefined;\n\n    // For each data object, the _idProp defines which property has that object's unique identifier\n    this._idProp = \"_id\";\n\n    // A basic triple-equals equality checker for two values\n    this._eqFn = (l, r) => l[this._idProp] === r[this._idProp];\n\n    if (fromSession) {\n      try {\n        // Try to parse the existing data from the Session Storage API\n        data = JSON.parse(fromSession);\n      } catch (e) {\n        console.log(\"Unable to parse session messages, retrieving intial data.\");\n      }\n    }\n\n    let stripHashKey = (obj) =>\n        setProp(obj, '$$hashKey', undefined);\n\n    // Create a promise for the data; Either the existing data from session storage, or the initial data via $http request\n    this._data = (data ? $q.resolve(data) : $http.get(sourceUrl).then(resp => resp.data))\n        .then(this._commit.bind(this))\n        .then(() => JSON.parse(sessionStorage.getItem(sessionStorageKey)))\n        .then(array => array.map(stripHashKey));\n\n  }\n\n  /** Saves all the data back to the session storage */\n  _commit(data) {\n    sessionStorage.setItem(this.sessionStorageKey, JSON.stringify(data));\n    return this.$q.resolve(data);\n  }\n\n  /** Helper which simulates a delay, then provides the `thenFn` with the data */\n  all(thenFn) {\n    return this.$timeout(() => this._data, this.AppConfig.restDelay).then(thenFn);\n  }\n\n  /** Given a sample item, returns a promise for all the data for items which have the same properties as the sample */\n  search(exampleItem) {\n    let contains = (search, inString) =>\n        (\"\" + inString).indexOf(\"\" + search) !== -1;\n    let matchesExample = (example, item) =>\n        Object.keys(example).reduce((memo, key) => memo && contains(example[key], item[key]), true);\n    return this.all(items =>\n        items.filter(matchesExample.bind(null, exampleItem)));\n  }\n\n  /** Returns a promise for the item with the given identifier */\n  get(id) {\n    return this.all(items =>\n        items.find(item => item[this._idProp] === id));\n  }\n\n  /** Returns a promise to save the item.  It delegates to put() or post() if the object has or does not have an identifier set */\n  save(item) {\n    return item[this._idProp] ? this.put(item) : this.post(item);\n  }\n\n  /** Returns a promise to save (POST) a new item.   The item's identifier is auto-assigned. */\n  post(item) {\n    item[this._idProp] = guid();\n    return this.all(items => pushToArr(items, item)).then(this._commit.bind(this));\n  }\n\n  /** Returns a promise to save (PUT) an existing item. */\n  put(item, eqFn = this._eqFn) {\n    return this.all(items => {\n      let idx = items.findIndex(eqFn.bind(null, item));\n      if (idx === -1) throw Error(`${item} not found in ${this}`);\n      items[idx] = item;\n      return this._commit(items).then(() => item);\n    });\n  }\n\n  /** Returns a promise to remove (DELETE) an item. */\n  remove(item, eqFn = this._eqFn) {\n    return this.all(items => {\n      let idx = items.findIndex(eqFn.bind(null, item));\n      if (idx === -1) throw Error(`${item} not found in ${this}`);\n      items.splice(idx, 1);\n      return this._commit(items).then(() => item);\n    });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/util/sessionStorage.ts","/**\n * This file imports the third party library dependencies, then creates the angular module \"demo\"\n * and exports it.\n */\n\n// External dependencies\nimport * as angular from \"angular\";\nimport uiRouter from \"@uirouter/angularjs\";\nimport {visualizer} from \"@uirouter/visualizer\";\n\nimport {IInjectable, Ng1StateDeclaration} from \"@uirouter/angularjs\";\n// Types from @types/angular\nimport ComponentDefinition = angular.IComponentOptions;\nimport IDirective = angular.IDirective;\nimport IServiceProvider = angular.IServiceProvider;\nimport IAngularBootstrapConfig = angular.IAngularBootstrapConfig;\nimport IModule = angular.IModule;\nimport IDirectiveFactory = angular.IDirectiveFactory;\nimport Injectable = angular.Injectable;\n\n// Create the angular 1 module \"demo\".\n//\n// Since it is exported, other parts of the application (in other files) can then import it and register things.\n// In bootstrap.js, the module is imported, and the components, services, and states are registered.\nexport const ngmodule = angular.module(\"demo\", [uiRouter, 'ui.router.upgrade']);\n\n// Show ui-router-visualizer\nngmodule.run(['$uiRouter', ($uiRouter) => visualizer($uiRouter) ]);\n\n\n// Export code to register an \"AppModule\", used by each app feature module\nexport interface AppModule {\n  states?: Ng1StateDeclaration[];\n  components?: { [name: string]: ComponentDefinition };\n  directives?: { [name: string]: Injectable<IDirectiveFactory> };\n  services?: { [name: string]: IInjectable };\n  filters?: { [name: string]: IInjectable };\n  configBlocks?: IInjectable[];\n  runBlocks?: IInjectable[];\n}\n\nconst BLANK_MODULE: AppModule = {\n  states: [],\n  components: {},\n  directives: {},\n  services: {},\n  filters: {},\n  configBlocks: [],\n  runBlocks: []\n};\n\n/**\n * Register an app module's states, directives, components, filters, services,\n * and config/run blocks with the `ngmodule`\n *\n * @param ngModule the `angular.module()` object\n * @param appModule the feature module consisting of components, states, services, etc\n */\nexport function loadNg1AppModule(ngModule: IModule, appModule: AppModule) {\n  let module = Object.assign({}, BLANK_MODULE, appModule);\n\n  ngModule.config(['$stateProvider', $stateProvider => module.states.forEach(state => $stateProvider.state(state))]);\n\n  Object.keys(module.components).forEach(name => ngModule.component(name, module.components[name]));\n\n  Object.keys(module.directives).forEach(name => ngModule.directive(name, module.directives[name]));\n\n  Object.keys(module.services).forEach(name => ngModule.service(name, module.services[name]));\n\n  Object.keys(module.filters).forEach(name => ngModule.filter(name, module.filters[name]));\n\n  module.configBlocks.forEach(configBlock => ngModule.config(configBlock));\n\n  module.runBlocks.forEach(runBlock => ngModule.run(runBlock));\n\n  return ngModule;\n}\n\n\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/bootstrap/ngmodule.ts","import { PrefsComponent } from './prefs.component';\nimport { prefsState } from './prefs.states';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { UIRouterModule } from '@uirouter/angular';\n\n\nlet PREFS_STATES = [ prefsState ];\n\n/** The NgModule for the Preferences feature */\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    UIRouterModule.forChild({ states: PREFS_STATES })\n  ],\n  declarations: [ PrefsComponent ],\n})\nclass PrefsModule {}\n\nexport {PrefsModule};\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/prefs/index.ts"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAgBA;AAGA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAtBA;AAdA;AACA;AACA;AAWA;AAIA;;AAHA;AAAA;;;;;;;;;;AChBA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACNA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACZA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;ACfA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;AChBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;ACtBA;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;ACjCA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AASA;AAAA;AAEA;AADA;AACA;AAAA;AAFA;AARA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC9FA;AAEA;;AAEA;AACA;AAKA;AAJA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AApBA;;;;;;;;;;;ACJA;;AAEA;AACA;AAIA;AAAA;AAAA;AAAA;AAHA;AACA;AAEA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AA5CA;;;;;;;;;;;;;;;;;;;;;ACJA;AAGA;;;;;;;;;;;;;;AAcA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AALA;AAOA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAJA;AAMA;AAAA;AACA;AAAA;AACA;AACA;AAFA;;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAZA;;;;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAcA;AACA;;;;;;;;;;;ACxBA;AAEA;AAGA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAbA;;;;;;;;;;;ACFA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAnBA;;;;;;;;;;;ACRA;;AAEA;AACA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;AAKA;AACA;AACA;AACA;AA2BA;;;;;;;;;;ACxDA;;AAEA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;ACTA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;AC7EA;AACA;AACA;AACA;AAiBA;;;;;;;;;;;ACnBA;;;;;AAKA;AACA;AAUA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;AAKA;AACA;AACA;AAEA;AAEA;AAqCA;;;;;;;;;;;AC9FA;AACA;AA8BA;;;;;;;;;;;AC/BA;AAEA;;AAEA;AACA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;AAOA;AACA;AACA;AAEA;AAEA;AAmBA;;;;;;;;;;;ACvGA;;AAEA;AACA;AACA;AAEA;AAeA;;;;;;;;;;;ACrBA;;;;;;;;AAQA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAwBA;;;;;;;;;;;ACzCA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACrBA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;ACHA;AAEA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAEA;AACA;AASA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;AAIA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;AAEA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;AAOA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;;;;;;AAMA;AACA;AACA;AAEA;AAEA;AAuBA;;;;;;;;;;;AClIA;;AAEA;AACA;AACA;AACA;AAIA;;;;;;;;;;;ACTA;;;;;;AAMA;AACA;AACA;AAEA;AAaA;;;;;;;;;;;ACvBA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACrFA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAVA;;;;;;;;;;;ACDA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACZA;AAEA;;;;;;;;;;;AAWA;AACA;AAMA;;;;;;;;;AASA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAxGA;;;;;;;;;;ACdA;;;AAGA;;AAEA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AAEA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAlBA;;;;;;;;;;;;;;;;;AC1DA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AARA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;A","sourceRoot":""}