{"version":3,"file":"0.js","sources":["webpack:///./app/contacts/index.ts","webpack:///./app/contacts/contact.component.ts","webpack:///./app/contacts/contacts.component.ts","webpack:///./app/contacts/editContact.component.ts","webpack:///./app/contacts/contactDetail.component.ts","webpack:///./app/contacts/contactList.component.ts","webpack:///./app/contacts/contacts.states.ts"],"sourcesContent":["import {FormsModule}   from '@angular/forms';\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule} from \"@angular/core\";\nimport {UIRouterModule} from \"@uirouter/angular\";\n\nimport {contactsState, editContactState, newContactState, viewContactState} from \"./contacts.states\";\nimport {ContactDetail} from \"./contactDetail.component\";\nimport {ContactList} from \"./contactList.component\";\nimport {Contact} from \"./contact.component\";\nimport {Contacts} from \"./contacts.component\";\nimport {EditContact} from \"./editContact.component\";\n\nlet CONTACTS_STATES = [contactsState, newContactState, viewContactState, editContactState];\n\n/** The NgModule for Contacts feature */\n@NgModule({\n  imports: [\n      CommonModule,\n      FormsModule,\n      UIRouterModule.forChild({ states: CONTACTS_STATES })\n  ],\n  declarations: [Contact, ContactDetail, ContactList, Contacts, EditContact],\n})\nclass ContactsModule {}\n\nexport {ContactsModule};\n\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/contacts/index.ts","import {Component, Input} from \"@angular/core\";\n\n/**\n * This component renders details for a single contact\n *\n * A button messages the contact by linking to `mymessages.compose` state passing the email as a state parameter.\n * Another button edits the contact by linking to `contacts.contact.edit` state.\n */\n@Component({\n  selector: 'contact',\n  template: `\n    <div class=\"contact\">\n      <contact-detail [contact]=\"contact\"></contact-detail>\n    \n      <!-- This button has an ui-sref to the mymessages.compose state. The ui-sref provides the mymessages.compose\n           state with an non-url parameter, which is used as the initial message model -->\n      <button class=\"btn btn-primary\" uiSref=\"mymessages.compose\" [uiParams]=\"{ message: { to: contact.email } }\">\n        <i class=\"fa fa-envelope\"></i><span>Message</span>\n      </button>\n    \n      <!-- This button has a relative ui-sref to the contacts.contact.edit state. -->\n      <button class=\"btn btn-primary\" uiSref=\".edit\">\n        <i class=\"fa fa-pencil\"></i><span>Edit Contact</span>\n      </button>\n      <ui-view></ui-view>\n    </div>\n`})\nexport class Contact {\n  @Input() contact;\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/contacts/contact.component.ts","import {Component, Input} from \"@angular/core\";\n\n/**\n * This component renders the contacts submodule.\n *\n * On the left is the list of contacts.\n * On the right is the ui-view viewport where contact details appear.\n */\n@Component({\n  selector: 'contacts',\n  template: `\n    <div class=\"my-contacts flex-h\">\n    \n      <contact-list [contacts]=\"contacts\" class=\"flex nogrow\"></contact-list>\n    \n      <div ui-view>\n        <!-- This default content is displayed when the ui-view is not filled in by a child state -->\n        <h4 style=\"margin: 1em 2em;\">Select a contact</h4>\n      </div>\n    </div>\n`})\nexport class Contacts {\n  @Input() contacts;\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/contacts/contacts.component.ts","import * as angular from \"angular\";\nimport {UIView} from \"@uirouter/angular\";\nimport {StateService, TransitionService} from \"@uirouter/core\";\nimport {Component, Input, Inject, Optional} from \"@angular/core\";\n\n/**\n * The EditContact component\n *\n * This component is used by both `contacts.contact.edit` and `contacts.new` states.\n *\n * The component makes a copy of the contqct data for editing.\n * The new copy and original (pristine) copy are used to determine if the contact is \"dirty\" or not.\n * If the user navigates to some other state while the contact is \"dirty\", the `uiCanExit` component\n * hook asks the user to confirm navigation away, losing any edits.\n *\n * The Delete Contact button is wired to the `remove` method, which:\n * - asks for confirmation from the user\n * - deletes the resource from REST API\n * - navigates back to the contacts grandparent state using relative addressing `^.^`\n *   the `reload: true` option re-fetches the contacts list from the server\n *\n * The Save Contact button is wired to the `save` method which:\n * - saves the REST resource (PUT or POST, depending)\n * - navigates back to the parent state using relative addressing `^`.\n *   when editing an existing contact, this returns to the `contacts.contact` \"view contact\" state\n *   when creating a new contact, this returns to the `contacts` list.\n *   the `reload: true` option re-fetches the contacts resolve data from the server\n */\n@Component({\n  selector: 'edit-contact',\n  template: `\n    <div class=\"contact\">\n      <div class=\"details\">\n        <div><label>First</label><input type=\"text\" [(ngModel)]=\"contact.name.first\"></div>\n        <div><label>Last</label><input type=\"text\" [(ngModel)]=\"contact.name.last\"></div>\n        <div><label>Company</label><input type=\"text\" [(ngModel)]=\"contact.company\"></div>\n        <div><label>Age</label><input type=\"text\" [(ngModel)]=\"contact.age\"></div>\n        <div><label>Phone</label><input type=\"text\" [(ngModel)]=\"contact.phone\"></div>\n        <div><label>Email</label><input type=\"text\" [(ngModel)]=\"contact.email\"></div>\n        <div><label>Street</label><input type=\"text\" [(ngModel)]=\"contact.address.street\"></div>\n        <div><label>City</label><input type=\"text\" [(ngModel)]=\"contact.address.city\"> </div>\n        <div><label>State</label><input type=\"text\" [(ngModel)]=\"contact.address.state\"></div>\n        <div><label>Zip</label><input type=\"text\" [(ngModel)]=\"contact.address.zip\"></div>\n        <div><label>Image</label><input type=\"text\" [(ngModel)]=\"contact.picture\"></div>\n      </div>\n    \n      <hr>\n    \n      <div>\n        <!-- This button's ui-sref relatively targets the parent state, i.e., contacts.contact -->\n        <button class=\"btn btn-primary\" uiSref=\"^\"><i class=\"fa fa-close\"></i><span>Cancel</span></button>\n        <button class=\"btn btn-primary\" (click)=\"save(contact)\"><i class=\"fa fa-save\"></i><span>Save</span></button>\n        <button class=\"btn btn-primary\" (click)=\"remove(contact)\"><i class=\"fa fa-close\"></i><span>Delete</span></button>\n      </div>\n    </div>\n`})\nexport class EditContact {\n  @Input() pristineContact;\n  contact;\n  state;\n  deregister;\n  canExit: boolean;\n\n  // Note: you can inject StateService from @uirouter/core\n  constructor(public $state: StateService,\n              @Inject('DialogService') public DialogService,\n              @Inject('Contacts') public Contacts,\n              @Optional() @Inject(UIView.PARENT_INJECT) view,\n              public $trans: TransitionService) {\n    this.state = view && view.context && view.context.name;\n  }\n\n  ngOnInit() {\n    // Make an editable copy of the pristineContact\n    this.contact = angular.copy(this.pristineContact);\n    this.deregister = this.$trans.onBefore({ exiting: this.state }, () => this.uiCanExit());\n  }\n\n  ngOnDestroy() {\n    if (this.deregister) this.deregister();\n  }\n\n  uiCanExit() {\n    if (this.canExit || angular.equals(this.contact, this.pristineContact)) {\n      return true;\n    }\n\n    let message = 'You have unsaved changes to this contact.';\n    let question = 'Navigate away and lose changes?';\n    return this.DialogService.confirm(message, question);\n  }\n\n  /** Ask for confirmation, then delete the contact, then go to the grandparent state ('contacts') */\n  remove(contact) {\n    this.DialogService.confirm(`Delete contact: ${contact.name.first} ${contact.name.last}`)\n        .then(() => this.Contacts.remove(contact))\n        .then(() => this.canExit = true)\n        .then(() => this.$state.go(\"^.^\", null, { reload: true }));\n  }\n\n  /** Save the contact, then go to the parent state (either 'contacts' or 'contacts.contact') */\n  save(contact) {\n    this.Contacts.save(contact)\n        .then(() => this.canExit = true)\n        .then(() => this.$state.go(\"^\", null, { reload: true }));\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/contacts/editContact.component.ts","import {Component, Input} from \"@angular/core\";\n\n/**\n * This component renders a read only view of the details for a single contact.\n */\n@Component({\n  selector: 'contact-detail',\n  template: `\n  <div class=\"flex-h\">\n    <div class=\"details\">\n      <h3>{{contact.name.first}} {{contact.name.last}}</h3>\n      <div><label>Company</label><div>{{contact.company}}</div></div>\n      <div><label>Age</label><div>{{contact.age}}</div></div>\n      <div><label>Phone</label><div>{{contact.phone}}</div></div>\n      <div><label>Email</label><div>{{contact.email}}</div></div>\n      <div class=\"flex-h\">\n        <label>Address</label>\n        <div>{{contact.address.street}}<br>\n              {{contact.address.city}}, {{contact.address.state}} {{contact.address.zip}}\n        </div>\n      </div>\n    </div>\n\n    <div class=\"flex nogrow\">\n      <img [src]=\"contact.picture\"/>\n    </div>\n  </div>\n`\n})\nexport class ContactDetail {\n  @Input() contact;\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/contacts/contactDetail.component.ts","import {Component, Input} from \"@angular/core\";\n\n/**\n * This component renders a list of contacts.\n * \n * At the top is a \"new contact\" button.\n * Each list item is a clickable link to the `contacts.contact` details substate\n */\n@Component({\n  selector: 'contact-list',\n  template: `\n  <ul class=\"selectlist list-unstyled\">\n    <li>\n      <!-- This link is a relative ui-sref to the contacts.new state. -->\n      <a uiSref=\".new\">\n        <button class=\"btn btn-primary\">\n          <i class=\"fa fa-pencil\"></i><span>New Contact</span>\n        </button>\n      </a>\n    </li>\n\n    <li>&nbsp;</li>\n\n    <!-- Highlight the selected contact:\n        When the current state matches the ui-sref's state (and its parameters)\n        ui-sref-active applies the 'selected' class to the li element -->\n    <li *ngFor=\"let contact of contacts\" >\n      <a uiSref=\".contact\" [uiParams]=\"{contactId: contact._id}\" uiSrefActive=\"selected\">\n        {{contact.name.first}} {{contact.name.last}}\n      </a>\n    </li>\n  </ul>\n`})\nexport class ContactList {\n  @Input() contacts;\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/contacts/contactList.component.ts","import {Ng2StateDeclaration} from \"@uirouter/angular\";\n\nimport {Contact} from \"./contact.component\";\nimport {Contacts} from \"./contacts.component\";\nimport {EditContact} from \"./editContact.component\";\n\n\n/**\n * This state displays the contact list.\n * It also provides a nested ui-view (viewport) for child states to fill in.\n *\n * The contacts are fetched using a resolve.\n */\nexport const contactsState: Ng2StateDeclaration = {\n  parent: 'app', // declares that 'contacts' is a child of 'app'\n  name: \"contacts\",\n  url: \"/contacts\",\n  resolve: {\n    // Resolve all the contacts.  The resolved contacts are injected into the controller.\n    contacts: (Contacts) => Contacts.all()\n  },\n  data: { requiresAuth: true },\n  component: Contacts\n};\n\n/**\n * This state displays a single contact.\n * The contact to display is fetched using a resolve, based on the `contactId` parameter.\n */\nexport const viewContactState: Ng2StateDeclaration = {\n  name: 'contacts.contact',\n  url: '/:contactId',\n  resolve: {\n    // Resolve the contact, based on the contactId parameter value.\n    // The resolved contact is provided to the contactComponent's contact binding\n    contact: (Contacts, $transition$) => Contacts.get($transition$.params().contactId)\n  },\n  component: Contact\n};\n\n\n/**\n * This state allows a user to edit a contact\n *\n * The contact data to edit is injected from the parent state's resolve.\n *\n * This state uses view targeting to replace the parent ui-view (which would normally be filled\n * by 'contacts.contact') with the edit contact template/controller\n */\nexport const editContactState: Ng2StateDeclaration = {\n  name: 'contacts.contact.edit',\n  url: '/edit',\n  views: {\n    // Relatively target the grand-parent-state's $default (unnamed) ui-view\n    // This could also have been written using ui-view@state addressing: $default@contacts\n    // Or, this could also have been written using absolute ui-view addressing: !$default.$default.$default\n    '^.^.$default': {\n      bindings: { pristineContact: \"contact\" },\n      component: EditContact\n    }\n  }\n};\n\n/**\n * This state allows a user to create a new contact\n *\n * The contact data to edit is injected into the component from the parent state's resolve.\n */\nexport const newContactState: Ng2StateDeclaration = {\n  name: 'contacts.new',\n  url: '/new',\n  resolve: {\n    pristineContact: () => ({ name: {}, address: {} })\n  },\n  component: EditContact\n};\n\n\n\n// WEBPACK FOOTER //\n// node_modules/source-map-loader!./app/contacts/contacts.states.ts"],"mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AARA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;ACzBA;AAEA;;;;;AAKA;AAoBA;AAAA;AAEA;AAAA;AAAA;AADA;AAAA;;AAAA;AADA;AAnBA;AACA;AACA;AAgBA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;AC3BA;AAEA;;;;;AAKA;AAcA;AAAA;AAEA;AAAA;AAAA;AADA;AAAA;;AAAA;AADA;AAbA;AACA;AACA;AAUA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBA;AA6BA;AAOA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAjDA;AAAA;;AAAA;AADA;AA5BA;AACA;AACA;AAyBA;AAUA;AACA;AACA;AAHA;AARA;AAAA;;;;;;;;;;;;;;;;;;;;ACxDA;AAEA;;AAEA;AAyBA;AAAA;AAEA;AAAA;AAAA;AADA;AAAA;;AAAA;AADA;AAxBA;AACA;AACA;AAqBA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;AC7BA;AAEA;;;;;AAKA;AA0BA;AAAA;AAEA;AAAA;AAAA;AADA;AAAA;;AAAA;AADA;AAzBA;AACA;AACA;AAsBA;AACA;AAAA;;;;;;;;;;;AC/BA;AACA;AACA;AAGA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}